def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

def is_safe(board, row, col):
    # Check the column
    for i in range(row):
        if board[i][col] == 'Q':
            return False
    
    # Check the left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False
    
    # Check the right diagonal
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == 'Q':
            return False
    
    return True

def solve_n_queens(board, row):
    if row >= len(board):
        print_board(board)
        return True

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 'Q'
            if solve_n_queens(board, row + 1):
                return True
            board[row][col] = '.'  # backtrack

    return False

def solve_8_queens():
    board = [['.' for _ in range(8)] for _ in range(8)]
    if not solve_n_queens(board, 0):
        print("No solution found")

# Solve the 8-Queen problem
solve_8_queens()
